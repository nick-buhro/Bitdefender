//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using NickBuhro.Bitdefender.Models;

namespace {{ Namespace }}
{
	
    /// <summary>
{% assign strs = Controller.Description | NewlineToBr | StripNewlines | Split: '<br />' -%}
{% for s in strs -%}
    /// {{ s | XmlEncode }}
{% endfor -%}
    /// </summary>	
    public sealed partial class {{ Controller.Name }}Controller : Controller
    {		
        public {{ Controller.Name }}Controller(HttpClient http)
            : base(http, "{{ Controller.Path }}") { }

{% for m in Controller.Methods -%}

        /// <summary>	
{% assign strs = m.Description | NewlineToBr | StripNewlines | Split: '<br />' -%}
{% for s in strs -%}
        /// {{ s | XmlEncode }}
{% endfor -%}
        /// </summary>
{% for p in m.Parameters -%}
        /// <param name="{{ p.Name }}"> {{ p.Description | XmlEncode }} </param>
{% endfor -%}
{% if m.ReturnDescription != nil -%}
        /// <returns>
{% assign strs = m.ReturnDescription | NewlineToBr | StripNewlines | Split: '<br />' -%}
{% for s in strs -%}
        /// {{ s | XmlEncode }}
{% endfor -%}
        /// </returns>
{% endif -%}
        public Task{% if m.ReturnType != 'void' %}<{{ m.ReturnType}}>{% endif %} {{ m.Name | Slice:0 | Upcase }}{{ m.Name | Slice:1, 1000 }} (
{% for p in m.Parameters -%}
            {{p.Type}}{% if p.Optional and p.Nullable == false %}?{% endif %} {{ p.Name }}{% if p.Optional %} = null{% endif %},
{% endfor -%}
            CancellationToken ct = default(CancellationToken))
        {
{% for p in m.Parameters -%}{% if p.Optional == false and p.Nullable -%}            
            if ({{ p.Name }} == null)
                throw new ArgumentNullException("{{ p.Name }}");
{% endif -%}{% endfor -%}            
            var p = new JObject();
{% for p in m.Parameters -%}
{% if p.Optional == true -%}
            if ({{ p.Name }} != null)
    {% endif %}            p["{{ p.Name }}"] = {% if p.Enum %}(int){% endif %}{{ p.Name }}{% if p.Optional and p.Nullable == false %}.Value{% endif %};
{% endfor -%}
                        
            return Send<JObject, {{ m.ReturnType | Replace:'void','object' }}>("{{ m.Name }}", p, ct);
        }
{% endfor -%}
    }
}
